;; eg-examples. changes made by hand may be overwritten. if you made changes, make sure to call eg-load-examples to sync eg-examples with your file.
((emacs-lisp (+ (+ 1 2)
                (+ 2 3)
                (+ 4 7)
                (+ 3 3)
                (+ 4 5)
                (+ 6 7))
             (completing-read (completing-read "Letter: " '(a b c d)))
             (define-prefix-command (define-prefix-command 'eg-command-map))
             (eg--args (eg--args '(+ 1 2))
                       (eg--args '(defun square (x)
                                    (* x x))))
             (eg--current-list (eg--current-list))
             (eg--def-p (eg--def-p '(defun square (x)
                                      (* x x)))
                        (eg--def-p '(square 2)))
             (eg--example-template (eg--example-template '(+ 1 2))
                                   (eg--example-template '(defun square (x)
                                                            (* x x))))
             (eg--examples-to-string (eg--examples-to-string #'+))
             (eg--get-examples (eg--get-examples '+))
             (eg--get-functions (eg--get-functions))
             (eg--operator (eg--operator '(+ 1 2))
                           (eg--operator '(defun square (x)
                                            (* x x))))
             (eg--run-examples-to-string (eg--run-examples-to-string #'+))
             (eg--sort-examples (eg--sort-examples '((a 1)
                                                     (c 3)
                                                     (b 2))))
             (eg--sort-stored (eg--sort-stored (eg--local->stored eg-examples)))
             (expand-file-name (expand-file-name "~/eg/eg.el"))
             (expt (expt 2 3)
                   (expt 3 4)
                   (expt 5 7)
                   (expt 1 2))
             (format (format ";; %s" 'a))
             (general-def (general-def :prefix "C-c C-e" :keymaps 'lispy-mode-map "a" 'eg-add-example "C-a" 'eg-add-example "r" 'eg-run-examples "C-r" 'eg-run-examples "S-r" 'eg-remove-examples "C-S-r" 'eg-remove-examples))
             (global-set-key (global-set-key (kbd "C-c C-e")
                                             'eg-command-map))
             (length (length '(a b c d))))
 (lisp (access (access '((a . b)
                         (c . d))
                       'a))
       (accesses (accesses *current-remap* "Emacs" "C-@"))
       (adjoin (adjoin 'a '(a b c d)))
       (app-define-key (app-define-key "emacs" "C-@" "@"))
       (function-name (function-name #'+))
       (make-hash-table (make-hash-table :test #'equal))
       (make-test (make-test '(+ 1 2)))
       (remove (remove "a" '(("a" . b)
                             ("c" . d))
                       :key #'car :test #'equal))
       (window-by-number (window-by-number 0)))))
